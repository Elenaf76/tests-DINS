2. Опишите ещё не менее 7 тест кейсов для запроса из задания 1. своими словами в произвольной, но понятной форме. 
2.1. ID имеет тип данных 'number':
      ввести URL в формате GET /posts?userId=<id>&title=<title>
      добавить в тест ожидаемый ответ, что тип данных id - 'number'
      отправить запрос
   Ожидаемый результат: система возвращает указанный в запросе пост, тест пройден
2.2. ID поста не должен быть пустым:
      ввести URL в формате GET /posts?userId=<id>&title=<title>
      добавить в тест ожидаемый ответ, что id не может иметь пустое значение 'null'
      отправить запрос
   Ожидаемый результат: система возвращает указанный в запросе пост, тест пройден
2.3  Проверить значение ID поста: 
      ввести URL в формате GET /posts?userId=<id>&title=<title>
      добавить в тест ожидаемый ответ, что значение id равно, указанному в документации к соответствоющему запросу(например,
хотим получить пост из коллекции постов userId=5, и в документации API для этого поста указан id=45, то в тест ожидаемое значение пишем (45)
      отправить запрос
   Ожидаемый результат: система возвращает указанный в запросе пост, тест пройден
2.4  TITLE не имеет дубликатов на других страницах:
     ввести URL в формате GET /posts?userId=<id>&title=<title>
     в значение userId указать,например, номер коллекции постов 6, а в значении 'title' указать любой заголовок из коллекции 2 
      отправить запрос
   Ожидаемый результат: система возвращает пустой список, дубликат с указанным title не найден
2.5  Проверить значение "title":
      ввести URL в формате GET /posts?userId=<id>&title=<title>
      добавить в тест ожидаемый ответ, что значение "title" равно тексту, указанному в скобках (текст заголовка берем из документации API)
      отправить запрос
   Ожидаемый результат: система возвращает указанный в запросе пост, тест пройден
2.6 Заголовок запроса содержит Content-Type:
      ввести URL в формате GET /posts?userId=<id>&title=<title>
      отправить запрос
      проверить раздел headers
   Ожидаемый результат: система возвращает указанный в запросе пост, заголовок содержит верный тип контента application/json
 2.7 Проверить время отклика:
     ввести URL в формате GET /posts?userId=<id>&title=<title>
     добавить в тест ожидаемый ответ для времени ответа, который, предпочтительно, должен быть менее 0,2 секунды, чтобы пользователь ощущал, что получает ответ мгновенно  
     отправить запрос
   Ожидаемый результат: система возвращает указанный в запросе пост, тест пройден

3.Предположим, что GET  /posts/101  вернул statusСode = 404, в требованиях указано, что в случае отсутствия 
нужного postId возвращать пустой список. Представьте, что вам нужно описать эту проблему в баг-трекинговой системе, 
чтобы разработчик смог её воспроизвести и починить. Приведите составленное описание: 
ID: t1
Название: "В ответе запроса GET возвращается статус-код 404"
Шаги по воспроизведению: 1.Выбрать метод GET
                         2. Отправить запрос https://jsonplaceholder.typicode.com/posts/101
                         3. Получить ответ
Ожидаемый результат: Система возвращает пустой список, статус-код 200
Фактический результат: Система возвращает статус-код 404
Серьезность: NORMAL
Вид Тестирования: Функциональное